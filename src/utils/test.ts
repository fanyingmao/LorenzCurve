//单元测试
// import FunUtils from './FunUtils';
import FunLC from './FunLC';

const macthArr = FunLC[3].func.toString().match(/return.*;/);
if(macthArr){
  console.log(macthArr[0].replace('return ','').replace(';',''));
}

// let startTime = Date.now();
// let res = FunUtils.binarySearchAStart(FunLC[0].func, 0.1, FunLC[0].minA, FunLC[0].maxA);
// let res = FunUtils.getIntegral0_1(FunLC[0].func, 0.5);

// let res = FunUtils.searchPointFitStart(FunLC[0].func, [{ x: 0.8, y: 0.2},{ x: 0.2, y: 0.02}], FunLC[0].minA, FunLC[0].maxA);
// console.log(res);
// let spenTime = (Date.now() - startTime) / 1000;
// console.log('spenTime:' + spenTime);

// const x = [0.0000144731, 0.0000253279, 0.0000506558, 0.0000470375, 0.0000615106, 0.0000470375, 0.0000687472, 0.0000542741, 0.0000868385, 0.0000687472, 0.0001013116, 0.0000940751, 0.0000976934, 0.0001013116, 0.0001121664, 0.0000868385, 0.0001194030, 0.0000868385, 0.0001447309, 0.0001230213, 0.0001411126, 0.0001338761, 0.0001664405, 0.0001447309, 0.0001700588, 0.0002315694, 0.0002641339, 0.0002170963, 0.0002207146, 0.0001845319, 0.0002532791, 0.0002786070, 0.0003184080, 0.0003364993, 0.0002966983, 0.0004378109, 0.0003545907, 0.0003256445, 0.0003473541, 0.0004124830, 0.0004161013, 0.0004595206, 0.0004305744, 0.0005029398, 0.0004776119, 0.0005101764, 0.0005499774, 0.0004957033, 0.0005970149, 0.0006006332, 0.0005137947, 0.0006114880, 0.0006549073, 0.0007743103, 0.0006657621, 0.0007887834, 0.0007743103, 0.0007526006, 0.0007851651, 0.0009081863, 0.0009335142, 0.0008539123, 0.0009841701, 0.0009769335, 0.0011252827, 0.0010239711, 0.0009588422, 0.0010999548, 0.0010927182, 0.0011252827, 0.0010565355, 0.0011867933, 0.0012953415, 0.0012700136, 0.0011216644, 0.0012917232, 0.0012989597, 0.0013279059, 0.0013061963, 0.0013459973, 0.0014364541, 0.0015920398, 0.0014545455, 0.0015196744, 0.0015956581, 0.0015667119, 0.0016209860, 0.0017657169, 0.0015920398, 0.0016607870, 0.0018018996, 0.0016426956, 0.0019538670, 0.0018308458, 0.0019755767, 0.0018344640, 0.0019719584, 0.0019538670, 0.0021528720, 0.0021709634, 0.0020949796, 0.0021564903, 0.0023156943, 0.0020732700, 0.0023084577, 0.0022505654, 0.0022107644, 0.0023120760, 0.0023627318, 0.0025291723, 0.0025653550, 0.0025979195, 0.0026160109, 0.0026558118, 0.0027317956, 0.0028186341, 0.0026413388, 0.0027752148, 0.0026377205, 0.0027969245, 0.0028620534, 0.0028873813, 0.0028113976, 0.0029959294, 0.0029995477, 0.0030393487, 0.0030357304, 0.0031732248, 0.0031913161, 0.0031659882, 0.0032890095, 0.0029706015, 0.0031080959, 0.0030863863, 0.0033179557, 0.0034880145, 0.0032564450, 0.0036472185, 0.0035024876, 0.0034482135, 0.0034916327, 0.0033649932, 0.0034663048, 0.0035567616, 0.0037702397, 0.0037919493, 0.0035061058, 0.0037014925, 0.0037955676, 0.0038824062, 0.0038606965, 0.0038208955, 0.0039294437, 0.0038751696, 0.0040054274, 0.0039764812, 0.0041139756, 0.0042116689, 0.0039837178, 0.0041429218, 0.0040090457, 0.0041175938, 0.0041537766, 0.0040416101, 0.0043165988, 0.0041284487, 0.0041863410, 0.0041646314, 0.0045662596, 0.0044577114, 0.0043636364, 0.0043274536, 0.0044396201, 0.0042333786, 0.0047182270, 0.0043057440, 0.0043744912, 0.0046494799, 0.0047761194, 0.0046639530, 0.0046024423, 0.0046530981, 0.0046096789, 0.0047109905, 0.0047037540, 0.0046820443, 0.0046567164, 0.0045554048, 0.0048629579, 0.0045662596, 0.0047761194, 0.0047833559, 0.0048267752, 0.0048050656, 0.0045952058, 0.0049787427, 0.0048376300, 0.0046892809, 0.0049353234, 0.0048376300, 0.0048701945, 0.0049606513, 0.0049244686, 0.0048050656, 0.0048484848, 0.0049570330, 0.0050366350, 0.0048846676, 0.0050293985, 0.0049027589, 0.0049751244, 0.0049063772, 0.0048484848, 0.0047327001, 0.0049932157, 0.0047688829, 0.0048738128, 0.0048267752, 0.0047435550, 0.0047580280, 0.0048412483, 0.0048991407, 0.0046675712, 0.0047978290, 0.0047218453, 0.0046675712, 0.0047652646, 0.0046530981, 0.0046856626, 0.0047580280, 0.0045698779, 0.0046132972, 0.0044360018, 0.0045192221, 0.0044540932, 0.0044830393, 0.0044070556, 0.0044106739, 0.0044866576, 0.0042225237, 0.0043998191, 0.0044287653, 0.0041899593, 0.0041103573, 0.0042985075, 0.0039511533, 0.0040343736, 0.0039656264, 0.0039583899, 0.0041175938, 0.0038787879, 0.0038317503, 0.0038751696, 0.0038534600, 0.0038245138, 0.0037449118, 0.0040090457, 0.0037159656, 0.0037557666, 0.0035965626, 0.0036110357, 0.0035639982, 0.0033830846, 0.0034011759, 0.0033903211, 0.0033577567, 0.0032455902, 0.0034626866, 0.0033324288, 0.0030755314, 0.0033360470, 0.0031153324, 0.0032202623, 0.0031370421, 0.0030863863, 0.0032094075, 0.0031551334, 0.0031659882, 0.0028222524, 0.0029163275, 0.0028403437, 0.0027571235, 0.0027571235, 0.0028331072, 0.0025689733, 0.0025689733, 0.0027896879, 0.0025110810, 0.0025653550, 0.0027317956, 0.0023808232, 0.0024712800, 0.0024459521, 0.0022433288, 0.0022831298, 0.0024676617, 0.0021781999, 0.0021890547, 0.0021203076, 0.0022578019, 0.0022722750, 0.0021962913, 0.0020515604, 0.0021094527, 0.0021564903, 0.0020877431, 0.0020117594, 0.0020009046, 0.0018489371, 0.0019538670, 0.0020262325, 0.0019140660, 0.0018742650, 0.0017367707, 0.0018525554, 0.0017729534, 0.0016897332, 0.0018308458, 0.0016499322, 0.0015848033, 0.0016861149, 0.0014907282, 0.0016861149, 0.0015015830, 0.0014111262, 0.0014726368, 0.0015956581, 0.0014219810, 0.0015052013, 0.0014292175, 0.0016788783, 0.0013930348, 0.0013496156, 0.0013459973, 0.0013532338, 0.0013279059, 0.0012881049, 0.0013387607, 0.0011614654, 0.0012519222, 0.0012410674, 0.0013025780, 0.0012953415, 0.0011469923, 0.0010818634, 0.0011108096, 0.0012302126, 0.0010927182, 0.0011867933, 0.0010891000, 0.0011650837, 0.0011035730, 0.0011252827, 0.0010456807, 0.0009877883, 0.0011433740, 0.0010456807, 0.0010891000, 0.0010094980, 0.0009624604, 0.0009226594, 0.0010275893, 0.0010275893, 0.0010492990, 0.0010492990, 0.0009298960, 0.0008249661, 0.0009660787, 0.0008792402, 0.0008792402, 0.0008900950, 0.0010565355, 0.0008683853, 0.0008539123, 0.0008430574, 0.0008611488, 0.0007996382, 0.0007779285, 0.0007634555, 0.0007164179, 0.0007417458, 0.0008141113, 0.0007091814, 0.0007055631, 0.0007562189, 0.0007200362, 0.0007779285, 0.0006910900, 0.0007091814, 0.0007381275, 0.0005825418, 0.0006947083, 0.0006549073, 0.0007236545, 0.0006657621, 0.0006259611, 0.0007634555, 0.0006259611, 0.0006187246, 0.0007526006, 0.0006838535, 0.0006549073, 0.0005933967, 0.0006983265, 0.0005680687, 0.0005572139, 0.0006295794, 0.0005970149, 0.0006295794, 0.0005391226, 0.0006006332, 0.0005499774, 0.0005825418, 0.0005608322, 0.0006006332, 0.0005680687, 0.0005355043, 0.0004993216, 0.0005318860, 0.0005680687, 0.0006259611, 0.0005716870, 0.0005282678, 0.0004559023, 0.0005137947, 0.0005572139, 0.0004957033, 0.0004703754, 0.0005065581, 0.0004993216, 0.0005391226, 0.0005463591, 0.0004631389, 0.0005210312, 0.0004920850, 0.0004124830, 0.0004848485, 0.0004161013, 0.0004016282, 0.0004559023, 0.0004269561, 0.0004595206, 0.0004016282, 0.0004088648, 0.0004631389, 0.0004739937, 0.0004378109, 0.0004088648, 0.0004197196, 0.0004197196, 0.0004739937, 0.0004233379, 0.0004197196, 0.0004197196, 0.0004016282, 0.0004016282, 0.0004016282, 0.0005174129, 0.0003835369, 0.0003871551, 0.0003763003, 0.0003690638, 0.0003618272, 0.0004776119, 0.0004016282, 0.0003654455, 0.0004124830, 0.0003509724, 0.0003618272, 0.0003690638, 0.0003907734, 0.0003473541, 0.0003799186, 0.0003509724, 0.0003364993, 0.0003401176, 0.0003509724, 0.0003220262, 0.0003726820, 0.0002930801, 0.0003328810, 0.0002749887, 0.0002243329, 0.0003328810, 0.0002641339, 0.0003147897, 0.0002966983, 0.0002822252, 0.0002894618, 0.0002568973, 0.0002460425, 0.0002460425, 0.0002966983, 0.0002243329, 0.0002279512, 0.0002496608, 0.0002532791, 0.0002098598, 0.0002496608, 0.0002026232, 0.0002170963, 0.0002388060, 0.0002170963, 0.0001700588, 0.0002641339, 0.0001990050, 0.0002098598, 0.0001664405, 0.0001483492, 0.0001628223, 0.0001664405, 0.0001772953, 0.0001628223, 0.0001411126, 0.0001736771, 0.0001374943, 0.0001085482, 0.0001447309, 0.0001157847, 0.0001411126, 0.0001519674,];
// const y = [690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170];

// const res = FunUtils.getEqualMean(x,y,100);
// console.log(JSON.stringify(res));